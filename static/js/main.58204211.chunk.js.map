{"version":3,"sources":["components/Header/index.js","components/Hero/index.js","containers/About/index.js","components/BlogPost/index.js","components/Sidebar/index.js","containers/Post/index.js","components/AllPosts/index.js","pages/index.jsx","pages/404.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","target","Hero","style","textDecoration","About","BlogPost","useState","post","setPost","setPostId","useEffect","postId","match","params","blogPost","data","find","id","blogImage","class","blogTitle","blogCategory","src","width","blogText","postedOn","author","Sidebar","posts","setPosts","map","key","to","Post","height","overflow","AllPosts","MainPage","PageNotFound","App","exact","path","component","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAsBeA,G,MAdA,SAACC,GACd,OACE,6BACA,4BAAQC,UAAU,UACd,sCACI,uBAAGC,KAAK,oDAAoDC,OAAO,UAAS,uBAAGF,UAAU,0BAAzF,KACA,uBAAGC,KAAK,8BAA6B,uBAAGD,UAAU,wBAAlD,UCGGG,EAVF,SAACJ,GACZ,OACQ,yBAAKC,UAAU,cACb,yBAAKA,UAAU,WACd,uBAAGC,KAAK,IAAIG,MAAO,CAACC,eAAe,oBAAnC,IAAwD,0BAAML,UAAU,SAAhB,WAAgC,2CCGtFM,EAPD,SAACP,GACb,OACE,uC,cCgDWQ,EA/CE,SAACR,GAAW,IAAD,EAELS,mBAAS,IAFJ,mBAErBC,EAFqB,KAEhBC,EAFgB,OAIFF,mBAAS,IAJP,mBAIfG,GAJe,WAa5B,OAPAC,qBAAU,WACR,IAAMC,EAASd,EAAMe,MAAMC,OAAOF,OAC5BJ,EAAOO,EAASC,KAAKC,MAAK,SAAAT,GAAI,OAAIA,EAAKU,IAAMN,KACnDH,EAAQD,GACRE,EAAUE,KACT,CAACJ,EAAMV,EAAMe,MAAMC,OAAOF,SAER,IAAlBJ,EAAKW,UAAwB,KAGhC,6BAKA,yBAAKpB,UAAU,uBAMf,wBAAIqB,MAAM,QAAQZ,EAAKa,WACvB,yBAAKtB,UAAU,cAEf,0BAAMqB,MAAM,iBAAiBZ,EAAKc,cAChC,yBAAKC,IAAKf,EAAKW,UAAWhB,MAAO,CAACqB,MAAM,WAI1C,yBAAKzB,UAAU,kBAEf,6BAAMS,EAAKiB,UACX,uBAAG1B,UAAU,mBAAb,cAA2CS,EAAKkB,SAAhD,OAA8DlB,EAAKmB,Y,OCYpDC,EAlDE,SAAC9B,GAAW,IAAD,EAEAS,mBAAS,IAFT,mBAEnBsB,EAFmB,KAEZC,EAFY,KAU1B,OANAnB,qBAAU,WAER,IAAMkB,EAAQd,EAASC,KACvBc,EAASD,KACRA,GAID,6BAGFA,EAAME,KAAI,SAAAvB,GAER,OAKE,6BAGN,yBAAKL,MAAO,CAACqB,MAAO,QAASD,IAAKf,EAAKW,YAGvC,kBAAC,IAAD,CAASa,IAAKxB,EAAKU,GAAIe,GAAE,gBAAWzB,EAAKU,KAAzC,KAAiD,yBAAKnB,UAAY,cAAcS,EAAKa,WAArF,YCVea,EAlBF,SAACpC,GAEZ,OAEF,yBAAKC,UAAU,+BACf,yBAAKqB,MAAM,aACX,kBAAC,EAAatB,IAId,yBAAKsB,MAAM,gCAAgCjB,MAAO,CAACgC,OAAO,OAAQC,SAAS,YAAY,kBAAC,EAAD,SCwCxEC,EAlDG,SAACvC,GAAW,IAAD,EAEDS,mBAAS,IAFR,mBAEpBsB,EAFoB,KAEbC,EAFa,KAU3B,OANAnB,qBAAU,WAER,IAAMkB,EAAQd,EAASC,KACvBc,EAASD,KACRA,GAID,yBAAK9B,UAAU,OAGjB8B,EAAME,KAAI,SAAAvB,GAER,OAKE,yBAAKT,UAAU,YAGV,yBAAKwB,IAAKf,EAAKW,UAAWhB,MAAO,CAACqB,MAAO,UAEhD,uBAAGzB,UAAU,QACb,kBAAC,IAAD,CAASiC,IAAKxB,EAAKU,GAAIe,GAAE,gBAAWzB,EAAKU,KAAzC,KAAiD,yBAAKnB,UAAY,cAAcS,EAAKa,WAArF,a,OCvBYiB,EAZC,WACb,OAEI,6BACI,wBAAIvC,UAAU,QAAd,aACA,kBAAC,EAAD,QCOIwC,EAZK,WACjB,OAEI,6BACI,mCACA,uBAAGxC,UAAU,QAAb,kBACA,uBAAGC,KAAK,KAAR,mEC0BGwC,E,uKArBb,OACE,kBAAC,IAAD,KACE,yBAAKzC,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEN,yBAAKA,UAAU,aACf,kBAAC,IAAD,KACQ,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAQI,KAAK,SAASC,UAAWtC,IACjC,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,gBAAgBC,UAAWT,IAC7C,kBAAC,IAAD,CAAQS,UAAWJ,Y,GAbTK,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnC,MACvB,2DCXNoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.58204211.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n/**\r\n* @author\r\n* @function Header\r\n**/\r\n\r\nconst Header = (props) => {\r\n  return(\r\n    <div>\r\n    <header className=\"header\">\r\n        <div>  &nbsp;\r\n            <a href=\"https://www.linkedin.com/in/vo-gia-bao-366053190/\" target=\"_blank\"><i className=\"fa fa-linkedin-square\"></i> </a>\r\n            <a href=\"https://github.com/vgiabao\"><i className=\"fa fa-github-square\"></i> </a>\r\n        </div>\r\n     </header>\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default Header\r\n","import React from 'react';\r\n\r\n/**\r\n* @author\r\n* @function Hero\r\n**/\r\n\r\nconst Hero = (props) => {\r\n  return(\r\n          <div className=\"hero-image\">\r\n            <div className=\"content\">\r\n             <a href=\"/\" style={{textDecoration:\"none!important;\"}}> <span className=\"title\">Vogiabao<span>Blog</span></span></a>\r\n            </div>\r\n          </div>\r\n   )\r\n }\r\n\r\nexport default Hero\r\n","import React from 'react'\r\n\r\n/**\r\n* @author\r\n* @function About\r\n**/\r\n\r\nconst About = (props) => {\r\n  return(\r\n    <div>About</div>\r\n   )\r\n\r\n }\r\n\r\nexport default About","import React , {useState, useEffect} from 'react';\r\n\r\n\r\nimport blogPost from '../../data/blog.json';\r\n\r\n/**\r\n* @author\r\n* @function BlogPost\r\n**/\r\n\r\nconst BlogPost = (props) => {\r\n\r\nconst [post,setPost] = useState({});\r\n//reload the content\r\nconst[postId,setPostId] = useState(\"\");\r\n\r\nuseEffect(()=>{\r\n  const postId = props.match.params.postId;\r\n  const post = blogPost.data.find(post => post.id == postId);\r\n  setPost(post);\r\n  setPostId(postId);\r\n}, [post, props.match.params.postId]);\r\n\r\nif(post.blogImage == \"\") return null;\r\n\r\n  return(\r\n<div>\r\n\r\n\r\n\r\n\r\n<div className=\"blog-post-container\">\r\n\r\n\r\n\r\n\r\n\r\n<h3 class=\"my-5\">{post.blogTitle}</h3>\r\n<div className=\"post-thumb\">\r\n\r\n<span class=\"blog-post-tag\">{post.blogCategory}</span>\r\n  <img src={post.blogImage} style={{width:\"100%\"}}/>\r\n  \r\n  {/* <img src={require('../../assets/images/mustang.jpg')} /> */}\r\n</div>\r\n<div className=\"blog-post-text\">\r\n\r\n<div>{post.blogText}</div>\r\n<p className=\"mt-5 text-muted\">Posted on: {post.postedOn} by {post.author}</p>\r\n</div>\r\n\r\n</div></div>\r\n\r\n   )\r\n\r\n }\r\n\r\nexport default BlogPost","\r\nimport React, { useState, useEffect } from 'react';\r\nimport blogPost from '../../data/blog.json';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n/**\r\n* @author\r\n* @function Sidebar \r\n**/\r\n\r\nconst Sidebar  = (props) => {\r\n\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(()=>{\r\n\r\n    const posts = blogPost.data;\r\n    setPosts(posts);\r\n  }, posts);\r\n\r\n  return(\r\n\r\n    <div>\r\n\r\n{\r\n  posts.map(post => {\r\n\r\n    return(\r\n\r\n     \r\n\r\n\r\n      <div >\r\n\r\n\r\n<img style={{width: \"100%\"}} src={post.blogImage}/>\r\n   \r\n\r\n<NavLink key={post.id} to={`/post/${post.id}`}>  <div className = \"post-title\">{post.blogTitle}</div>  </NavLink>\r\n\r\n\r\n\r\n\r\n       </div>\r\n           \r\n     \r\n\r\n\r\n\r\n\r\n    )\r\n\r\n  })\r\n}\r\n\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default Sidebar;","import React from 'react'\r\n\r\n\r\nimport BlogPost from '../../components/BlogPost';\r\nimport Sidebar from '../../components/Sidebar';\r\n/**\r\n* @author\r\n* @function Post\r\n**/\r\n\r\nconst Post = (props) => {\r\n\r\n  return(\r\n\r\n<div className=\"row justify-content-between\">\r\n<div class=\"col-md-8 \">\r\n<BlogPost {...props}/>\r\n\r\n\r\n</div>\r\n<div class=\"col-md-offset-2 col-md-2 mt-5\" style={{height:\"50vh\", overflow:\"hidden;\"}}><Sidebar /></div>\r\n\r\n</div>\r\n\r\n   )\r\n\r\n }\r\n\r\nexport default Post","\r\nimport React, { useState, useEffect } from 'react';\r\nimport blogPost from '../../data/blog.json';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n/**\r\n* @author\r\n* @function AllPosts \r\n**/\r\n\r\nconst AllPosts  = (props) => {\r\n\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(()=>{\r\n\r\n    const posts = blogPost.data;\r\n    setPosts(posts);\r\n  }, posts);\r\n\r\n  return(\r\n\r\n    <div className=\"row\">\r\n\r\n{\r\n  posts.map(post => {\r\n\r\n    return(\r\n\r\n     \r\n\r\n\r\n      <div className=\"col-md-3\">\r\n\r\n\r\n           <img src={post.blogImage} style={{width: \"100%\"}} />\r\n   \r\n    <p className=\"lead\">\r\n    <NavLink key={post.id} to={`/post/${post.id}`}>  <div className = \"post-title\">{post.blogTitle}</div>  </NavLink>\r\n\r\n    </p>\r\n\r\n\r\n       </div>\r\n           \r\n     \r\n\r\n\r\n\r\n\r\n    )\r\n\r\n  })\r\n}\r\n\r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default AllPosts ","import React from \"react\";\r\n\r\nimport AllPosts from '../components/AllPosts';\r\nconst MainPage = () => {\r\n    return(\r\n\r\n        <div>\r\n            <h3 className=\"my-3\">All Posts</h3>\r\n            <AllPosts />\r\n        </div>\r\n  \r\n\r\n    )\r\n}\r\n\r\nexport  default MainPage;","import React from \"react\";\r\n\r\n\r\nconst PageNotFound = () => {\r\n    return(\r\n\r\n        <div>\r\n            <h1>404</h1>\r\n            <p className=\"lead\">Page not found</p>\r\n            <a href=\"/\">&larr; Επιστροφή</a>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport  default PageNotFound;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Hero from './components/Hero';\r\nimport About from './containers/About';\r\nimport Post from './containers/Post';\r\nimport AllPosts from './components/AllPosts';\r\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect} from 'react-router-dom';\r\n\r\nimport MainPage from './pages';\r\nimport PageNotFound from './pages/404';\r\n\r\nclass App extends Component {\r\nrender(){\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">   \r\n      <Header/> \r\n      <Hero /> \r\n\r\n<div className=\"container\">\r\n<Switch>\r\n        <Route exact path=\"/\" component={MainPage} />\r\n        <Route  path=\"/about\" component={About} />\r\n        <Route exact path=\"/post/:postId\" component={Post} />\r\n        <Route  component={PageNotFound} />\r\n       </Switch>\r\n</div>\r\n\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}